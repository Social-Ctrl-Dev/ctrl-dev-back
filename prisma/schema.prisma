// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String?
  email          String   @unique
  phone          String?
  link_portfolio String?
  info_profile   String?
  avatar         String?
  posts          Int      @default(0)
  code           Int?
  is_verified    Boolean?
  provider       String
  supabase_uid   String   @unique
  role           Rol?     @relation(fields: [role_id], references: [id])
  role_id        Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  postdb  Post[]
  comment Comment[]
  likes Like[]

  @@map("users")
}

model Rol {
  id          Int       @id @default(autoincrement())
  permissions String
  description String?
  created_at  DateTime? @default(now())
  users       User[]

  @@map("rol")
}

model Post {
  id    Int    @id @default(autoincrement())
  title String
  body  String

  tags    Tag[]
  comment Comment[]
  user    User      @relation(fields: [userID], references: [id])
  userID  Int
  likes Like[] 

  @@map("posts")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("tags")
}

model Comment {
  id   Int    @id @default(autoincrement())
  body String

  post   Post @relation(fields: [postID], references: [id])
  postID Int
  user   User @relation(fields: [userID], references: [id])
  userID Int

  @@map("comments")
}

model Like {
  id   Int    @id @default(autoincrement())

  post   Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int
  user   User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
  
  @@unique([post_id, user_id])

  @@map("likes")
}
